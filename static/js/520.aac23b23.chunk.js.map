{"version":3,"file":"static/js/520.aac23b23.chunk.js","mappings":"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","sources":["components/Dialog/Dialog.jsx","components/ContactTable/ContactTable.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport { styled, createTheme, ThemeProvider  } from '@mui/material/styles';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport { useCreateContactMutation, useUpdateContactMutation } from 'redux/backend/api';\nimport { toast } from 'react-toastify';\n\n\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuiDialogContent-root': {\n    padding: theme.spacing(2),\n  },\n  '& .MuiDialogActions-root': {\n    padding: theme.spacing(1),\n  },\n}));\n\nfunction BootstrapDialogTitle(props) {\n  const { children, onClose, ...other } = props;\n\n  return (\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n      {children}\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{\n            position: 'absolute',\n            right: 8,\n            top: 8,\n            color: (theme) => theme.palette.grey[500],\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </DialogTitle>\n  );\n}\n\nBootstrapDialogTitle.propTypes = {\n  children: PropTypes.node,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default function CustomizedDialog({ onClose, credentials, type }) {\n\n  const { id, name, number } = credentials;\n  const [openDialog, setOpenDialog] = React.useState(true);\n  const [contactName, setContactName] = React.useState(name);\n  const [contactNumber, setContactNumber] = React.useState(number);\n  const [createContact] = useCreateContactMutation();\n  const [updateContact] = useUpdateContactMutation();\n\n\n  const handleChange = event => {\n    const { name } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setContactName(event.currentTarget.value)\n        break;\n      case 'number':\n        setContactNumber(event.currentTarget.value)\n        break;\n      default:\n        return;\n    }\n  }; \n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    switch (type) {\n      case 'edit':\n              try {\n                await updateContact({id, name: contactName, number: contactNumber});\n                toast.success('Contact was updated in your phonebook');\n              } catch (error) {\n                console.log('Oops.. Please, try again');\n              }\n        break;\n      case 'add':\n              try {\n                await createContact({name: contactName, number: contactNumber});\n                console.log('Contact was created in your phonebook');\n              } catch (error) {\n                console.log('Oops.. Please, try again');\n              }\n        break;\n      default:\n        return;\n    }\n    \n    //onClose(formData)\n    setOpenDialog(false);\n  }\n\n  const handleClose = () => {\n    setOpenDialog(false);\n  };\n\n  const defaultTheme = createTheme();\n\n  return (\n    <div>\n      <BootstrapDialog\n        onClose={handleClose}\n        aria-labelledby=\"customized-dialog-title\"\n        open={openDialog}\n      >\n        <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          {type = 'add' ? 'Add contact' : 'Edit contact'}\n        </BootstrapDialogTitle>\n        <DialogContent dividers>\n          <ThemeProvider theme={defaultTheme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n              <CssBaseline />\n                <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\n                  <TextField\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    id=\"name\"\n                    label=\"Contact name\"\n                    name=\"name\"\n                    value = {contactName}\n                    onChange={handleChange}\n                    autoComplete=\"name\"\n                    autoFocus\n                  />\n                  <TextField\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    name=\"number\"\n                    value = {contactNumber}\n                    onChange={handleChange}\n                    label=\"Rhone number\"\n                    type=\"text\"\n                    id=\"number\"\n                    autoComplete=\"current-contact\"\n                  />\n                  <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    sx={{ mt: 3, mb: 2 }}\n                    onClick={handleClose}\n                  >\n                    Save\n                  </Button>\n                </Box>\n            </Container>\n          </ThemeProvider>\n        </DialogContent>\n      </BootstrapDialog>\n    </div>\n  );\n}","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { alpha } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport TableSortLabel from '@mui/material/TableSortLabel';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\n// import FilterListIcon from '@mui/icons-material/FilterList';\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\nimport Dialog from '../Dialog'\nimport { visuallyHidden } from '@mui/utils';\nimport { useCreateContactMutation, useDeleteContactMutation, useUpdateContactMutation } from 'redux/backend/api';\nimport { toast } from 'react-toastify';\n\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) {\n      return order;\n    }\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  {\n    id: 'id',\n    numeric: false,\n    disablePadding: false,\n    label: 'id',\n  },\n  {\n    id: 'name',\n    numeric: false,\n    disablePadding: false,\n    label: 'Name',\n  },\n  {\n    id: 'number',\n    numeric: false,\n    disablePadding: false,\n    label: 'Phone',\n  },\n  {\n    id: 'actions',\n    numeric: false,\n    disablePadding: false,\n    label: 'Actions',\n  }\n];\n\nfunction EnhancedTableHead(props) {\n  const { order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            align={'left'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n      </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nfunction EnhancedTableToolbar({ numSelected, handleOpenModal }) {\n\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n        ...(numSelected > 0 && {\n          bgcolor: (theme) =>\n            alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\n        }),\n      }}\n    >\n        <Typography\n          sx={{ flex: '1 1 100%' }}\n          variant=\"h6\"\n          id=\"tableTitle\"\n          component=\"div\"\n        >\n          My Phonebook\n        </Typography>\n        <Tooltip title=\"Add contact\">\n          <IconButton onClick={handleOpenModal}>\n            <PersonAddIcon />\n          </IconButton>\n        </Tooltip>\n      \n    </Toolbar>\n  );\n}\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nexport default function EnhancedTable({rows}) {\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('name');\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const [deleteContact] = useDeleteContactMutation();\n  const [updateContact] = useUpdateContactMutation();\n  const [createContact] = useCreateContactMutation();\n  const [credentials, setCredentials] = React.useState({id: '', name: '', number: ''})\n  \n  const [openAdd, setOpenAdd] = React.useState(false);\n  const [openEdit, setOpenEdit] = React.useState(false);\n  \n\n\n  const handleOpenAdd = () => {\n    setOpenAdd(true);\n  };\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelected = rows.map((n) => n.name);\n      setSelected(newSelected);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleEditClick = (contactId, contactName, contactNumber) => {\n    // setCredentials({id: contactId, name: contactName, number: contactNumber})\n    setCredentials({id: contactId, name: contactName, number: contactNumber})\n\n    // const handleChange = useCallback(({ target: { name, checked } }) => {\n    //   setCheckbox(prevState => {\n    //     return new Map(prevState).set(name, checked);\n    //   });\n    // }, []);\n    console.log(credentials)\n  }\n  const handleDeleteClick = async (event, contactId) => {\n    try {\n      await deleteContact(contactId);\n      //TODO: popup window with confirmation deleting contact\n      console.log('Contact was deleted from your phonebook');\n    } catch (error) {\n      console.log('Oops.. Please, try again');\n    }\n  }\n\n  const handleAddClose = async formData => {\n    try {\n      await createContact(formData);\n      console.log('Contact was created in your phonebook');\n    } catch (error) {\n      console.log('Oops.. Please, try again');\n    }\n    setOpenAdd(false);\n\n    console.log(formData);\n  };\n\n\n  const handleEditClose = async (formData, event) => {\n    try {\n      await updateContact(formData);\n      toast.success('Contact was updated in your phonebook');\n    } catch (error) {\n      console.log('Oops.. Please, try again');\n    }\n    setOpenEdit(false);\n    console.log(formData);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n  const visibleRows = React.useMemo(\n    () =>\n      stableSort(rows, getComparator(order, orderBy)).slice(\n        page * rowsPerPage,\n        page * rowsPerPage + rowsPerPage,\n      ),\n    [order, orderBy, page, rowsPerPage, rows],\n  );\n\n  return (\n    <>\n    <Box sx={{ width: '100%' }}>\n      <Paper sx={{ width: '100%', mb: 2 }}>\n        <EnhancedTableToolbar numSelected={selected.length} handleOpenModal={handleOpenAdd} />\n\n        {openAdd && <Dialog onClose={handleAddClose} credentials={credentials} type='add' />}\n        <TableContainer>\n          <Table\n            sx={{ minWidth: 750 }}\n            aria-labelledby=\"tableTitle\"\n            size={'medium'}\n          >\n            <EnhancedTableHead\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {visibleRows.map((row, index) => {\n                const labelId = `enhanced-table-checkbox-${index}`;\n\n                return (\n                  <TableRow\n                    hover\n                    tabIndex={-1}\n                    key={row.name + index}\n                    sx={{ cursor: 'pointer' }}\n                    align=\"left\">\n                    <TableCell\n                      component=\"th\"\n                      id={labelId}\n                      scope=\"row\"\n                      padding=\"normal\"\n                    >\n                      { index + 1}\n                    </TableCell>\n                    <TableCell align=\"left\">{row.name}</TableCell>\n                    <TableCell align=\"left\">{row.number}</TableCell>\n                    <TableCell align=\"left\">\n                        <Tooltip title=\"Edit contact\">\n                          <IconButton onClick={() => handleEditClick(row.id, row.name, row.number)}>\n                            <EditIcon />\n                          </IconButton>\n                        </Tooltip>\n                      <IconButton onClick={(event) => handleDeleteClick(event, row.id)}><DeleteIcon /></IconButton>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n              {emptyRows > 0 && (\n                <TableRow\n                  style={{\n                    height: (53) * emptyRows,\n                  }}\n                >\n                  <TableCell colSpan={4} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n          />\n          {openEdit && <Dialog onClose={handleEditClose} credentials={credentials} type='edit' />}\n      </Paper>\n    </Box>\n    </>\n  );\n}","// import ContactForm from 'components/ContactForm/ContactForm';\nimport BasicTable  from '../components/ContactTable';\nimport { useSelector } from \"react-redux\";\nimport { selectFilter } from 'redux/contacts/filterSlice'\nimport { useGetContactsQuery } from \"redux/backend/api\";\n\nconst ContactsPage = () => {\n  const {data: contacts, isSuccess, isError} = useGetContactsQuery();\n  const filter = useSelector(selectFilter)\n\n  if (!contacts) { return }\n\n  const normalizedFilter = filter.toLowerCase();\n  const visibleContacts = contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter))\n  // console.log(visibleContacts);\n\n  return (\n    <>\n    {isSuccess && (\n    <div>\n          <BasicTable rows={ visibleContacts } />\n    </div>)\n    }\n    {isError && <div>Error</div>}\n    </>\n  );\n};\n\nexport default ContactsPage;"],"names":["BootstrapDialog","styled","Dialog","theme","padding","spacing","BootstrapDialogTitle","props","children","onClose","other","DialogTitle","sx","m","p","IconButton","onClick","position","right","top","color","palette","grey","Close","CustomizedDialog","credentials","type","id","name","number","React","openDialog","setOpenDialog","contactName","setContactName","contactNumber","setContactNumber","useCreateContactMutation","createContact","useUpdateContactMutation","updateContact","handleChange","event","currentTarget","value","handleSubmit","preventDefault","toast","console","log","handleClose","defaultTheme","createTheme","open","DialogContent","dividers","ThemeProvider","Container","component","maxWidth","CssBaseline","Box","onSubmit","noValidate","mt","TextField","margin","required","fullWidth","label","onChange","autoComplete","autoFocus","Button","variant","mb","descendingComparator","a","b","orderBy","headCells","numeric","disablePadding","EnhancedTableHead","order","onRequestSort","TableHead","TableRow","map","headCell","TableCell","align","sortDirection","TableSortLabel","active","direction","property","visuallyHidden","EnhancedTableToolbar","numSelected","handleOpenModal","Toolbar","pl","sm","pr","xs","bgcolor","alpha","primary","main","action","activatedOpacity","Typography","flex","Tooltip","title","PersonAdd","EnhancedTable","rows","setOrder","setOrderBy","selected","setSelected","page","setPage","rowsPerPage","setRowsPerPage","useDeleteContactMutation","deleteContact","setCredentials","openAdd","setOpenAdd","openEdit","setOpenEdit","handleDeleteClick","contactId","handleAddClose","formData","handleEditClose","emptyRows","Math","max","length","visibleRows","array","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","slice","width","Paper","TableContainer","Table","minWidth","size","onSelectAllClick","target","checked","newSelected","n","rowCount","TableBody","row","labelId","hover","tabIndex","cursor","scope","Edit","Delete","style","height","colSpan","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt","useGetContactsQuery","contacts","data","isSuccess","isError","filter","useSelector","selectFilter","normalizedFilter","toLowerCase","visibleContacts","contact","includes"],"sourceRoot":""}